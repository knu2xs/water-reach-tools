# -*- coding: utf-8 -*-import sysfrom pathlib import Pathimport arcpy# ensure importing water-reach-tools worksdir_prj = Path(__file__).parent.parentdir_src = dir_prj / 'src'if dir_src.exists():    sys.path.append(str(dir_src))from water_reach_tools import Reachclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Water Reach Toolbox"        self.alias = "water_reach_toolbox"        # List of tool classes associated with this toolbox        self.tools = [GetHydroline]class GetHydroline(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Get Hydroline"        self.description = "Get a hydroline based on an upstream starting point and downstream end point."        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        start_pt = arcpy.Parameter(            displayName='Start Point',            name='start_point',            datatype='GPFeatureRecordSetLayer',            parameterType='Required',            direction='Input'        )        start_pt.filter.list = ['POINT']        end_pt = arcpy.Parameter(            displayName='End Point',            name='end_point',            datatype='GPFeatureRecordSetLayer',            parameterType='Required',            direction='Input'        )        end_pt.filter.list = ['POINT']        out_points_fc = arcpy.Parameter(            displayName='Output Point Feature Class',            name='out_point_fc',            datatype='GPFeatureLayer',            parameterType='Optional',            direction='Input'        )        out_points_fc.filter.list = ['POINT']        out_hydroline_fc = arcpy.Parameter(            displayName='Output Hydroline Feature Class',            name='out_hydroline_fc',            datatype='GPFeatureLayer',            parameterType='Required',            direction='Input'        )        out_hydroline_fc.filter.list = ['POLYLINE']        params = [start_pt, end_pt, out_points_fc, out_hydroline_fc]        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        # pull out the parameters to variables        start_pt = parameters[0].value        end_pt = parameters[1].value        out_points_fc = parameters[2].value        out_hydroline_fc = parameters[3].value        # execute the trace        return